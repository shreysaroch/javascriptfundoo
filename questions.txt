Q.1 Define event bubbling.
Ans: Because JavaScript allows DOM elements to be nested inside each other, if the handler of the child is clicked, the handler of

parent will also work as if it were clicked too. That sums up what event bubbling really is.

Q.2 How would you declare a three-dimensional array in Javascript?
Ans: You can do it like this:

var myArray = [[[]]];

Q.3 What is "this" keyword in Javascript?
Ans: this is used to refer to the current object in the code. In the global execution context (outside of any function), this refers to the global object, whether in strict mode or not.

Q.4 Does Javascript support automatic type conversion?
Ans: Yes. JavaScript does support automatic type conversion and it is the common way of type conversion used by JavaScript developers.

Q.5 What is event delegation and how does it work?
Ans: Event delegation allows us to avoid adding event listeners to specific nodes of the DOM; instead, the event listener is added to one parent. Using event delegation itâ€™s possible to add an event handler to an element, wait for an event to bubble up from a child element and easily determine from which element the event originated.

Q.6 What are the differences between null and undefined?

Ans: JavaScript has two distinct values for nothing, null and undefined.
undefined

undefined means, value of the variable is not defined. JavaScript has a global variable undefined whose value is "undefined" and typeof undefined is also "undefined". Remember, undefined is not a constant or a keyword. undefined is a type with exactly one value: undefined. Assigning a new value to it does not change the value of the type undefined.
8 Ways to get Undefined:

    A declared variable without assigning any value to it.
    Implicit returns of functions due to missing return statements.
    return statements that do not explicitly return anything.
    Lookups of non-existent properties in an object.
    Function parameters that have not passed.
    Anything that has been set to the value of undefined.
    Any expression in the form of void(expression)
    The value of the global variable undefined

null

null means empty or non-existent value which is used by programmers to indicate “no value”. null is a primitive value and you can assign null to any variable. null is not an object, it is a primitive value. For example, you cannot add properties to it. Sometimes people wrongly assume that it is an object, because typeof null returns "object".

Btw, null == undefined

Q7 What are the differences between == and ===?

Ans: The simplest way of saying that, == will not check types and === will check whether both sides are of same type. So, == is tolerant. But under the hood it converts to its convenient type to have both in same type and then do the comparison.

=== compares the types and values. Hence, if both sides are not same type, answer is always false. For example, if you are comparing two strings, they must have identical character sets. For other primitives (number, boolean) must share the same value.

Rule for implicit coercion: Comparison by using == does implicit type conversion under the hood. And rules for implicit coercion are as follows-

    If both operands are same type use ===
    undefined == null
    If one operands is string another is number, convert string to number
    If one is boolean and another is non-boolean, convert boolean to number and then perform comparison
    While comparing a string or number to an object, try to convert the object to a primitive type and then try to compare

Be careful while comparing objects, identifiers must reference the same objects or same array.


var a = {a: 1};
var b = {a: 1};
a == b //false
a === b //false

var c = a;
a == c//true
a === c //true
          

Special note: NaN, null and undefined will never === another type. NaN does not even === itself.